/*
 * ip_functions.c
 *
 * Contains all functions which pertain to setup and use of IP periperals.
 */

#include "adventures_with_ip.h"


/* ---------------------------------------------------------------------------- *
 * 								distortion()									*
 * ---------------------------------------------------------------------------- *
 * This function performs distortion effect. It takes the audio from input and  *
 * gives an output that is mix of original audio and distorted audio together	*
 * when any button is pressed, otherwise the original audio will be streamed.	*
 * This processes are done in PL part with created custom IP named Distortion	*
 * IP. The input and output audio are provided by audio codec.					*
 *																				*
 * This function is also gives a result to the terminal about how much clock	*
 * cycle and time passed while operation is done. It uses TTC timer from Zynq	*
 * device. The variables are stored in the adventures_with_ip.h in order to		*
 * access timer values from all files in the software.							*
 *																				*
 * The main menu can be accessed by entering 'q' on the keyboard.				*
 * ---------------------------------------------------------------------------- */
void distortion(){


	u32  in_left, in_right, out_left, out_right, prevL, prevR;

	while (!XUartPs_IsReceiveData(UART_BASEADDR)){
		XTime_GetTime(&tEnd);		//End time
		tStartPrev = tStart;		//Keep first start time
		XTime_GetTime(&tStart);		//Take new start time
		// Read audio input from codec
		in_left = Xil_In32(I2S_DATA_RX_L_REG);
		in_right = Xil_In32(I2S_DATA_RX_R_REG);

		/* -------------------------------------------------------------------------------- *
		 * --------------------------------- LEFT CHANNEL --------------------------------- *
		 * -------------------------------------------------------------------------------- */
		if(in_left != prevL) /* New left sample? */
		{
			/* Define the signal in new variable. */
			out_left = in_left;

			Xil_Out32(DIST_FIN, out_left >> SCALE);	// Input of distortion
			Xil_Out32(DIST_STROBE, 0x01);			// Stobe distortion to signal inputs are finished

			/* If any button is pressed */
			if(XGpio_DiscreteRead(&Gpio, BUTTON_CHANNEL)>0){

				/* Wait until output data is ready */
				out_left = (Xil_In32(DIST_FOUT) << (SCALE-1)); // Output distorted audio
			}

			/* Output audio to the codec */
			Xil_Out32(I2S_DATA_TX_L_REG, out_left);
		}

		/* -------------------------------------------------------------------------------- *
		 * --------------------------------- RIGHT CHANNEL -------------------------------- *
		 * -------------------------------------------------------------------------------- */
		if(in_right != prevR) /* New right sample? */
		{
			/* Define the signal in new variable. */
			out_right = in_right;

			Xil_Out32(DIST_FIN, out_right >> SCALE);	// Input of distortion
			Xil_Out32(DIST_STROBE, 0x01);			    // Stobe distortion to signal inputs are finished

			/* If any button is pressed */
			if(XGpio_DiscreteRead(&Gpio, BUTTON_CHANNEL)>0){
				out_right = (Xil_In32(DIST_FOUT) << (SCALE-1)); // output filtered audio
			}

			/* Output audio to the codec */
			Xil_Out32(I2S_DATA_TX_R_REG, out_right);
		}

		/* Update previous input values */
		prevL = in_left;
		prevR = in_right;

		// Write audio output to codec
		Xil_Out32(I2S_DATA_TX_L_REG, in_left);
		Xil_Out32(I2S_DATA_TX_R_REG, in_right);


	}

	/* If input from the terminal is 'q', then return to menu.
	 * Else, continue streaming. */
	if(XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET) == 'q'){
		/* print the timer results to the terminal.
		 * tEnd - tStartPrev =>
		 * take start time and finish the process, then take the end time beginning of the function. */
		printf("* Output took %llu clock cycles.\n", 2*(tEnd - tStartPrev));
		ElapsedTimeDistortion = 1.0 * (tEnd - tStartPrev) / (COUNTS_PER_SECOND);
		printf("* Output took %.9f s.\n",ElapsedTimeDistortion);

		menu();
	}
	else{
		distortion();
	}
} // distortion()

/* ---------------------------------------------------------------------------- *
* 								distortion_continuous()							*
 * ---------------------------------------------------------------------------- *
 * This function has same capability with the distortion() function.			*
 * The difference is this function does not require press button.				*
 * It gives the distorted audio to the output continuously.						*
 *																				*
 * The main menu can be accessed by entering 'q' on the keyboard.				*
 * ---------------------------------------------------------------------------- */
void distortion_continuous(){
	u32  in_left, in_right, out_left, out_right, prevL, prevR;

	while (!XUartPs_IsReceiveData(UART_BASEADDR)){
		// Read audio input from codec
		in_left = Xil_In32(I2S_DATA_RX_L_REG);
		in_right = Xil_In32(I2S_DATA_RX_R_REG);

		/* -------------------------------------------------------------------------------- *
		 * --------------------------------- LEFT CHANNEL --------------------------------- *
		 * -------------------------------------------------------------------------------- */
		if(in_left != prevL) /* New left sample? */
		{
			/* Add noise component to the L+R audio samples */
			out_left = in_left;

			Xil_Out32(DIST_FIN, out_left >> SCALE);	// Input of distortion
			Xil_Out32(DIST_STROBE, 0x01);			// Stobe distortion to signal inputs are finished


			out_left = (Xil_In32(DIST_FOUT) << (SCALE-1)); // Output distorted audio


			/* Output audio to the codec */
			Xil_Out32(I2S_DATA_TX_L_REG, out_left);
		}

		/* -------------------------------------------------------------------------------- *
		 * --------------------------------- RIGHT CHANNEL -------------------------------- *
		 * -------------------------------------------------------------------------------- */
		if(in_right != prevR) /* New right sample? */
		{
			/* Add scaled noise component to the L+R audio samples */
			out_right = in_right;

			Xil_Out32(DIST_FIN, out_right >> SCALE);	// Input of distortion
			Xil_Out32(DIST_STROBE, 0x01);			    // Stobe distortion to signal inputs are finished


			out_right = (Xil_In32(DIST_FOUT) << (SCALE-1)); // output distorted audio


			/* Output audio to the codec */
			Xil_Out32(I2S_DATA_TX_R_REG, out_right);
		}

		/* Update previous input values */
		prevL = in_left;
		prevR = in_right;
		// Write audio output to codec
		Xil_Out32(I2S_DATA_TX_L_REG, in_left);
		Xil_Out32(I2S_DATA_TX_R_REG, in_right);
	}

	/* If input from the terminal is 'q', then return to menu.
	 * Else, continue streaming. */
	if(XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET) == 'q') menu();
	else distortion_continuous();
} // distortion_continuous()



/* ---------------------------------------------------------------------------- *
 * 								audio_stream()									*
 * ---------------------------------------------------------------------------- *
 * This function performs audio loopback streaming by sampling the input audio	*
 * from the codec and then immediately passing the sample to the output of the	*
 * codec.																		*
 *																				*
 * The main menu can be accessed by entering 'q' on the keyboard.				*
 * ---------------------------------------------------------------------------- */
void audio_stream(){
	u32  in_left, in_right;

	while (!XUartPs_IsReceiveData(UART_BASEADDR)){
		// Read audio input from codec
		in_left = Xil_In32(I2S_DATA_RX_L_REG);
		in_right = Xil_In32(I2S_DATA_RX_R_REG);
		// Write audio output to codec
		Xil_Out32(I2S_DATA_TX_L_REG, in_left);
		Xil_Out32(I2S_DATA_TX_R_REG, in_right);
	}

	/* If input from the terminal is 'q', then return to menu.
	 * Else, continue streaming. */
	if(XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET) == 'q') menu();
	else audio_stream();
} // audio_stream()


/* ---------------------------------------------------------------------------- *
 * 								gpio_initi()									*
 * ---------------------------------------------------------------------------- *
 * Initialises the GPIO driver for the push buttons and switches.				*
 * ---------------------------------------------------------------------------- */
unsigned char gpio_init()
{
	int Status;

	Status = XGpio_Initialize(&Gpio, BUTTON_SWITCH_ID);
	if(Status != XST_SUCCESS) return XST_FAILURE;

	XGpio_SetDataDirection(&Gpio, SWITCH_CHANNEL, 0xFF);
	XGpio_SetDataDirection(&Gpio, BUTTON_CHANNEL, 0xFF);

	return XST_SUCCESS;
}
